Code:
    ◽️ update default and test config
    ◽️ experiment manager: stores validation losses and results(same as a good old logger! :D)
    ◽️ hyper parameter search => config generator and run them in k GPUs
        https://dmitryulyanov.github.io/if-you-are-lazy-to-install-slurm/
Experiment:
    ◽️ Dilated(all the rand generations)
    ◽️ Test on Audio(save, 4x)
Eval:
    ◽️ 3-way mmd over fft or time
    ◽️ Aggregation graphs (time and freq domain): https://matplotlib.org/gallery/recipes/fill_between_alpha.html
    ◽️ Nearest Neighbor (l2 distance)
        from sklearn.neighbors import BallTree
        import numpy as np
        X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])
        kdt = BallTree(X, leaf_size=30, metric='euclidean')
        kdt.query(X, k=2, return_distance=False)
------------------------------------------------------------------
Code:
    cubic interpolation: -0.0625, 0.0, 0.5625, 1.0, 0.5625, 0.0, -0.0625
    make a stable hinge loss config
Condition:
    data feeding(real/fake)
    get data: sex, age, status(sleep, ...), normality => by hand! :D, it is only 860 files :| :D or regex only for 860
    get mapping: dataset_id -> our_id
Experiment:
    Differential Privacy
    SampleRNN + D loss
    higher top freq(250 Hz)
    SuperRes: freq domain, channel domain
OtherDataset:
    https://www.kaggle.com/c/4477/download/{train, test}.zip
    https://github.com/mne-tools/mne-python/blob/master/mne/datasets/eegbci/eegbci.py
    https://www.isip.piconepress.com/projects/tuh_eeg/downloads/tuh_eeg_events/v1.0.0/
    https://www.isip.piconepress.com/projects/tuh_eeg/downloads/tuh_eeg_epilepsy/current/
    https://www.isip.piconepress.com/projects/tuh_eeg/downloads/tuh_eeg_abnormal/v2.0.0/
Classifier:
    https://github.com/vlawhern/arl-eegmodels
    https://github.com/stupiding/kaggle_EEG
Eval:
    TrainOnFakeTestOnReal/RV:
    Alish Features
    d(concatenated parts) == fake
    FID
    InceptionScore
    Sliced W Distance
Paper:
    16 channels
    connection network
    InfiniteSeqLen:
        G1(z)=o1,o2,o3,o4 so we can have a F(o1,o2,o3)=o4 and H(o2,o3,o4)=o1 + DropOut => extend this is VAE like output
        Use the connection net to make another gan over sequences of Z! :D
